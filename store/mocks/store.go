// Code generated by MockGen. DO NOT EDIT.
// Source: store/store.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/mattermost/mattermost-mattermod/model"
	store "github.com/mattermost/mattermost-mattermod/store"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStore) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockStoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStore)(nil).Close))
}

// DropAllTables mocks base method.
func (m *MockStore) DropAllTables() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DropAllTables")
}

// DropAllTables indicates an expected call of DropAllTables.
func (mr *MockStoreMockRecorder) DropAllTables() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropAllTables", reflect.TypeOf((*MockStore)(nil).DropAllTables))
}

// Issue mocks base method.
func (m *MockStore) Issue() store.IssueStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Issue")
	ret0, _ := ret[0].(store.IssueStore)
	return ret0
}

// Issue indicates an expected call of Issue.
func (mr *MockStoreMockRecorder) Issue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Issue", reflect.TypeOf((*MockStore)(nil).Issue))
}

// Mutex mocks base method.
func (m *MockStore) Mutex() store.LockStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mutex")
	ret0, _ := ret[0].(store.LockStore)
	return ret0
}

// Mutex indicates an expected call of Mutex.
func (mr *MockStoreMockRecorder) Mutex() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mutex", reflect.TypeOf((*MockStore)(nil).Mutex))
}

// PullRequest mocks base method.
func (m *MockStore) PullRequest() store.PullRequestStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PullRequest")
	ret0, _ := ret[0].(store.PullRequestStore)
	return ret0
}

// PullRequest indicates an expected call of PullRequest.
func (mr *MockStoreMockRecorder) PullRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullRequest", reflect.TypeOf((*MockStore)(nil).PullRequest))
}

// MockPullRequestStore is a mock of PullRequestStore interface.
type MockPullRequestStore struct {
	ctrl     *gomock.Controller
	recorder *MockPullRequestStoreMockRecorder
}

// MockPullRequestStoreMockRecorder is the mock recorder for MockPullRequestStore.
type MockPullRequestStoreMockRecorder struct {
	mock *MockPullRequestStore
}

// NewMockPullRequestStore creates a new mock instance.
func NewMockPullRequestStore(ctrl *gomock.Controller) *MockPullRequestStore {
	mock := &MockPullRequestStore{ctrl: ctrl}
	mock.recorder = &MockPullRequestStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPullRequestStore) EXPECT() *MockPullRequestStoreMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockPullRequestStore) Get(repoOwner, repoName string, number int) (*model.PullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", repoOwner, repoName, number)
	ret0, _ := ret[0].(*model.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPullRequestStoreMockRecorder) Get(repoOwner, repoName, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPullRequestStore)(nil).Get), repoOwner, repoName, number)
}

// ListOpen mocks base method.
func (m *MockPullRequestStore) ListOpen() ([]*model.PullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOpen")
	ret0, _ := ret[0].([]*model.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOpen indicates an expected call of ListOpen.
func (mr *MockPullRequestStoreMockRecorder) ListOpen() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOpen", reflect.TypeOf((*MockPullRequestStore)(nil).ListOpen))
}

// Save mocks base method.
func (m *MockPullRequestStore) Save(pr *model.PullRequest) (*model.PullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", pr)
	ret0, _ := ret[0].(*model.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockPullRequestStoreMockRecorder) Save(pr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockPullRequestStore)(nil).Save), pr)
}

// MockIssueStore is a mock of IssueStore interface.
type MockIssueStore struct {
	ctrl     *gomock.Controller
	recorder *MockIssueStoreMockRecorder
}

// MockIssueStoreMockRecorder is the mock recorder for MockIssueStore.
type MockIssueStoreMockRecorder struct {
	mock *MockIssueStore
}

// NewMockIssueStore creates a new mock instance.
func NewMockIssueStore(ctrl *gomock.Controller) *MockIssueStore {
	mock := &MockIssueStore{ctrl: ctrl}
	mock.recorder = &MockIssueStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIssueStore) EXPECT() *MockIssueStoreMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockIssueStore) Get(repoOwner, repoName string, number int) (*model.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", repoOwner, repoName, number)
	ret0, _ := ret[0].(*model.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIssueStoreMockRecorder) Get(repoOwner, repoName, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIssueStore)(nil).Get), repoOwner, repoName, number)
}

// Save mocks base method.
func (m *MockIssueStore) Save(issue *model.Issue) (*model.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", issue)
	ret0, _ := ret[0].(*model.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockIssueStoreMockRecorder) Save(issue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIssueStore)(nil).Save), issue)
}

// MockLockStore is a mock of LockStore interface.
type MockLockStore struct {
	ctrl     *gomock.Controller
	recorder *MockLockStoreMockRecorder
}

// MockLockStoreMockRecorder is the mock recorder for MockLockStore.
type MockLockStoreMockRecorder struct {
	mock *MockLockStore
}

// NewMockLockStore creates a new mock instance.
func NewMockLockStore(ctrl *gomock.Controller) *MockLockStore {
	mock := &MockLockStore{ctrl: ctrl}
	mock.recorder = &MockLockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLockStore) EXPECT() *MockLockStoreMockRecorder {
	return m.recorder
}

// Lock mocks base method.
func (m *MockLockStore) Lock(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lock", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Lock indicates an expected call of Lock.
func (mr *MockLockStoreMockRecorder) Lock(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockLockStore)(nil).Lock), ctx)
}

// Unlock mocks base method.
func (m *MockLockStore) Unlock() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unlock")
	ret0, _ := ret[0].(error)
	return ret0
}

// Unlock indicates an expected call of Unlock.
func (mr *MockLockStoreMockRecorder) Unlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockLockStore)(nil).Unlock))
}
