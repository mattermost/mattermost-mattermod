// Code generated by MockGen. DO NOT EDIT.
// Source: server/gitlab.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gitlab "github.com/xanzy/go-gitlab"
)

// MockPipelinesService is a mock of PipelinesService interface.
type MockPipelinesService struct {
	ctrl     *gomock.Controller
	recorder *MockPipelinesServiceMockRecorder
}

// MockPipelinesServiceMockRecorder is the mock recorder for MockPipelinesService.
type MockPipelinesServiceMockRecorder struct {
	mock *MockPipelinesService
}

// NewMockPipelinesService creates a new mock instance.
func NewMockPipelinesService(ctrl *gomock.Controller) *MockPipelinesService {
	mock := &MockPipelinesService{ctrl: ctrl}
	mock.recorder = &MockPipelinesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipelinesService) EXPECT() *MockPipelinesServiceMockRecorder {
	return m.recorder
}

// CancelPipelineBuild mocks base method.
func (m *MockPipelinesService) CancelPipelineBuild(pid interface{}, pipeline int, options ...gitlab.RequestOptionFunc) (*gitlab.Pipeline, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{pid, pipeline}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelPipelineBuild", varargs...)
	ret0, _ := ret[0].(*gitlab.Pipeline)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CancelPipelineBuild indicates an expected call of CancelPipelineBuild.
func (mr *MockPipelinesServiceMockRecorder) CancelPipelineBuild(pid, pipeline interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{pid, pipeline}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelPipelineBuild", reflect.TypeOf((*MockPipelinesService)(nil).CancelPipelineBuild), varargs...)
}

// CreatePipeline mocks base method.
func (m *MockPipelinesService) CreatePipeline(pid interface{}, opt *gitlab.CreatePipelineOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Pipeline, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePipeline", varargs...)
	ret0, _ := ret[0].(*gitlab.Pipeline)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreatePipeline indicates an expected call of CreatePipeline.
func (mr *MockPipelinesServiceMockRecorder) CreatePipeline(pid, opt interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePipeline", reflect.TypeOf((*MockPipelinesService)(nil).CreatePipeline), varargs...)
}

// GetPipeline mocks base method.
func (m *MockPipelinesService) GetPipeline(pid interface{}, pipeline int, options ...gitlab.RequestOptionFunc) (*gitlab.Pipeline, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{pid, pipeline}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPipeline", varargs...)
	ret0, _ := ret[0].(*gitlab.Pipeline)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPipeline indicates an expected call of GetPipeline.
func (mr *MockPipelinesServiceMockRecorder) GetPipeline(pid, pipeline interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{pid, pipeline}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipeline", reflect.TypeOf((*MockPipelinesService)(nil).GetPipeline), varargs...)
}

// GetPipelineVariables mocks base method.
func (m *MockPipelinesService) GetPipelineVariables(pid interface{}, pipeline int, options ...gitlab.RequestOptionFunc) ([]*gitlab.PipelineVariable, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{pid, pipeline}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPipelineVariables", varargs...)
	ret0, _ := ret[0].([]*gitlab.PipelineVariable)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPipelineVariables indicates an expected call of GetPipelineVariables.
func (mr *MockPipelinesServiceMockRecorder) GetPipelineVariables(pid, pipeline interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{pid, pipeline}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipelineVariables", reflect.TypeOf((*MockPipelinesService)(nil).GetPipelineVariables), varargs...)
}

// ListProjectPipelines mocks base method.
func (m *MockPipelinesService) ListProjectPipelines(pid interface{}, opt *gitlab.ListProjectPipelinesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.PipelineInfo, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjectPipelines", varargs...)
	ret0, _ := ret[0].([]*gitlab.PipelineInfo)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProjectPipelines indicates an expected call of ListProjectPipelines.
func (mr *MockPipelinesServiceMockRecorder) ListProjectPipelines(pid, opt interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectPipelines", reflect.TypeOf((*MockPipelinesService)(nil).ListProjectPipelines), varargs...)
}
