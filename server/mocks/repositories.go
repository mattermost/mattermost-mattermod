// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mattermost/mattermost-mattermod/server (interfaces: RepositoriesService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	github "github.com/google/go-github/v32/github"
	reflect "reflect"
)

// MockRepositoriesService is a mock of RepositoriesService interface
type MockRepositoriesService struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoriesServiceMockRecorder
}

// MockRepositoriesServiceMockRecorder is the mock recorder for MockRepositoriesService
type MockRepositoriesServiceMockRecorder struct {
	mock *MockRepositoriesService
}

// NewMockRepositoriesService creates a new mock instance
func NewMockRepositoriesService(ctrl *gomock.Controller) *MockRepositoriesService {
	mock := &MockRepositoriesService{ctrl: ctrl}
	mock.recorder = &MockRepositoriesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepositoriesService) EXPECT() *MockRepositoriesServiceMockRecorder {
	return m.recorder
}

// CreateStatus mocks base method
func (m *MockRepositoriesService) CreateStatus(arg0 context.Context, arg1, arg2, arg3 string, arg4 *github.RepoStatus) (*github.RepoStatus, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStatus", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.RepoStatus)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateStatus indicates an expected call of CreateStatus
func (mr *MockRepositoriesServiceMockRecorder) CreateStatus(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStatus", reflect.TypeOf((*MockRepositoriesService)(nil).CreateStatus), arg0, arg1, arg2, arg3, arg4)
}

// Get mocks base method
func (m *MockRepositoriesService) Get(arg0 context.Context, arg1, arg2 string) (*github.Repository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get
func (mr *MockRepositoriesServiceMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepositoriesService)(nil).Get), arg0, arg1, arg2)
}

// GetBranch mocks base method
func (m *MockRepositoriesService) GetBranch(arg0 context.Context, arg1, arg2, arg3 string) (*github.Branch, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBranch", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Branch)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBranch indicates an expected call of GetBranch
func (mr *MockRepositoriesServiceMockRecorder) GetBranch(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBranch", reflect.TypeOf((*MockRepositoriesService)(nil).GetBranch), arg0, arg1, arg2, arg3)
}

// GetCombinedStatus mocks base method
func (m *MockRepositoriesService) GetCombinedStatus(arg0 context.Context, arg1, arg2, arg3 string, arg4 *github.ListOptions) (*github.CombinedStatus, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCombinedStatus", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.CombinedStatus)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCombinedStatus indicates an expected call of GetCombinedStatus
func (mr *MockRepositoriesServiceMockRecorder) GetCombinedStatus(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCombinedStatus", reflect.TypeOf((*MockRepositoriesService)(nil).GetCombinedStatus), arg0, arg1, arg2, arg3, arg4)
}

// ListStatuses mocks base method
func (m *MockRepositoriesService) ListStatuses(arg0 context.Context, arg1, arg2, arg3 string, arg4 *github.ListOptions) ([]*github.RepoStatus, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStatuses", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*github.RepoStatus)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListStatuses indicates an expected call of ListStatuses
func (mr *MockRepositoriesServiceMockRecorder) ListStatuses(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStatuses", reflect.TypeOf((*MockRepositoriesService)(nil).ListStatuses), arg0, arg1, arg2, arg3, arg4)
}

// ListTeams mocks base method
func (m *MockRepositoriesService) ListTeams(arg0 context.Context, arg1, arg2 string, arg3 *github.ListOptions) ([]*github.Team, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTeams", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.Team)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTeams indicates an expected call of ListTeams
func (mr *MockRepositoriesServiceMockRecorder) ListTeams(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTeams", reflect.TypeOf((*MockRepositoriesService)(nil).ListTeams), arg0, arg1, arg2, arg3)
}
