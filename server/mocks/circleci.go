// Code generated by MockGen. DO NOT EDIT.
// Source: server/circleci.go

// Package mock_server is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	circleci "github.com/mattermost/go-circleci"
)

// MockCircleCIService is a mock of CircleCIService interface.
type MockCircleCIService struct {
	ctrl     *gomock.Controller
	recorder *MockCircleCIServiceMockRecorder
}

// MockCircleCIServiceMockRecorder is the mock recorder for MockCircleCIService.
type MockCircleCIServiceMockRecorder struct {
	mock *MockCircleCIService
}

// NewMockCircleCIService creates a new mock instance.
func NewMockCircleCIService(ctrl *gomock.Controller) *MockCircleCIService {
	mock := &MockCircleCIService{ctrl: ctrl}
	mock.recorder = &MockCircleCIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCircleCIService) EXPECT() *MockCircleCIServiceMockRecorder {
	return m.recorder
}

// BuildByProjectWithContext mocks base method.
func (m *MockCircleCIService) BuildByProjectWithContext(ctx context.Context, vcsType circleci.VcsType, account, repo string, opts map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildByProjectWithContext", ctx, vcsType, account, repo, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// BuildByProjectWithContext indicates an expected call of BuildByProjectWithContext.
func (mr *MockCircleCIServiceMockRecorder) BuildByProjectWithContext(ctx, vcsType, account, repo, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildByProjectWithContext", reflect.TypeOf((*MockCircleCIService)(nil).BuildByProjectWithContext), ctx, vcsType, account, repo, opts)
}

// GetPipelineWorkflowWithContext mocks base method.
func (m *MockCircleCIService) GetPipelineWorkflowWithContext(ctx context.Context, pipelineID, pageToken string) (*circleci.WorkflowList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPipelineWorkflowWithContext", ctx, pipelineID, pageToken)
	ret0, _ := ret[0].(*circleci.WorkflowList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPipelineWorkflowWithContext indicates an expected call of GetPipelineWorkflowWithContext.
func (mr *MockCircleCIServiceMockRecorder) GetPipelineWorkflowWithContext(ctx, pipelineID, pageToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipelineWorkflowWithContext", reflect.TypeOf((*MockCircleCIService)(nil).GetPipelineWorkflowWithContext), ctx, pipelineID, pageToken)
}

// ListBuildArtifactsWithContext mocks base method.
func (m *MockCircleCIService) ListBuildArtifactsWithContext(ctx context.Context, vcsType circleci.VcsType, account, repo string, buildNum int) ([]*circleci.Artifact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBuildArtifactsWithContext", ctx, vcsType, account, repo, buildNum)
	ret0, _ := ret[0].([]*circleci.Artifact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBuildArtifactsWithContext indicates an expected call of ListBuildArtifactsWithContext.
func (mr *MockCircleCIServiceMockRecorder) ListBuildArtifactsWithContext(ctx, vcsType, account, repo, buildNum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBuildArtifactsWithContext", reflect.TypeOf((*MockCircleCIService)(nil).ListBuildArtifactsWithContext), ctx, vcsType, account, repo, buildNum)
}

// ListRecentBuildsForProjectWithContext mocks base method.
func (m *MockCircleCIService) ListRecentBuildsForProjectWithContext(ctx context.Context, vcsType circleci.VcsType, account, repo, branch, status string, limit, offset int) ([]*circleci.Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecentBuildsForProjectWithContext", ctx, vcsType, account, repo, branch, status, limit, offset)
	ret0, _ := ret[0].([]*circleci.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecentBuildsForProjectWithContext indicates an expected call of ListRecentBuildsForProjectWithContext.
func (mr *MockCircleCIServiceMockRecorder) ListRecentBuildsForProjectWithContext(ctx, vcsType, account, repo, branch, status, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecentBuildsForProjectWithContext", reflect.TypeOf((*MockCircleCIService)(nil).ListRecentBuildsForProjectWithContext), ctx, vcsType, account, repo, branch, status, limit, offset)
}

// TriggerPipelineWithContext mocks base method.
func (m *MockCircleCIService) TriggerPipelineWithContext(ctx context.Context, vcsType circleci.VcsType, account, repo, branch, tag string, params map[string]interface{}) (*circleci.Pipeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TriggerPipelineWithContext", ctx, vcsType, account, repo, branch, tag, params)
	ret0, _ := ret[0].(*circleci.Pipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TriggerPipelineWithContext indicates an expected call of TriggerPipelineWithContext.
func (mr *MockCircleCIServiceMockRecorder) TriggerPipelineWithContext(ctx, vcsType, account, repo, branch, tag, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TriggerPipelineWithContext", reflect.TypeOf((*MockCircleCIService)(nil).TriggerPipelineWithContext), ctx, vcsType, account, repo, branch, tag, params)
}
