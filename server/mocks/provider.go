// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mattermost/mattermost-mattermod/server (interfaces: MetricsProvider)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMetricsProvider is a mock of MetricsProvider interface.
type MockMetricsProvider struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsProviderMockRecorder
}

// MockMetricsProviderMockRecorder is the mock recorder for MockMetricsProvider.
type MockMetricsProviderMockRecorder struct {
	mock *MockMetricsProvider
}

// NewMockMetricsProvider creates a new mock instance.
func NewMockMetricsProvider(ctrl *gomock.Controller) *MockMetricsProvider {
	mock := &MockMetricsProvider{ctrl: ctrl}
	mock.recorder = &MockMetricsProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsProvider) EXPECT() *MockMetricsProviderMockRecorder {
	return m.recorder
}

// IncreaseCronTaskErrors mocks base method.
func (m *MockMetricsProvider) IncreaseCronTaskErrors(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncreaseCronTaskErrors", arg0)
}

// IncreaseCronTaskErrors indicates an expected call of IncreaseCronTaskErrors.
func (mr *MockMetricsProviderMockRecorder) IncreaseCronTaskErrors(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseCronTaskErrors", reflect.TypeOf((*MockMetricsProvider)(nil).IncreaseCronTaskErrors), arg0)
}

// IncreaseGithubCacheHits mocks base method.
func (m *MockMetricsProvider) IncreaseGithubCacheHits(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncreaseGithubCacheHits", arg0, arg1)
}

// IncreaseGithubCacheHits indicates an expected call of IncreaseGithubCacheHits.
func (mr *MockMetricsProviderMockRecorder) IncreaseGithubCacheHits(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseGithubCacheHits", reflect.TypeOf((*MockMetricsProvider)(nil).IncreaseGithubCacheHits), arg0, arg1)
}

// IncreaseGithubCacheMisses mocks base method.
func (m *MockMetricsProvider) IncreaseGithubCacheMisses(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncreaseGithubCacheMisses", arg0, arg1)
}

// IncreaseGithubCacheMisses indicates an expected call of IncreaseGithubCacheMisses.
func (mr *MockMetricsProviderMockRecorder) IncreaseGithubCacheMisses(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseGithubCacheMisses", reflect.TypeOf((*MockMetricsProvider)(nil).IncreaseGithubCacheMisses), arg0, arg1)
}

// IncreaseRateLimiterErrors mocks base method.
func (m *MockMetricsProvider) IncreaseRateLimiterErrors() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncreaseRateLimiterErrors")
}

// IncreaseRateLimiterErrors indicates an expected call of IncreaseRateLimiterErrors.
func (mr *MockMetricsProviderMockRecorder) IncreaseRateLimiterErrors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseRateLimiterErrors", reflect.TypeOf((*MockMetricsProvider)(nil).IncreaseRateLimiterErrors))
}

// IncreaseWebhookErrors mocks base method.
func (m *MockMetricsProvider) IncreaseWebhookErrors(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncreaseWebhookErrors", arg0)
}

// IncreaseWebhookErrors indicates an expected call of IncreaseWebhookErrors.
func (mr *MockMetricsProviderMockRecorder) IncreaseWebhookErrors(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseWebhookErrors", reflect.TypeOf((*MockMetricsProvider)(nil).IncreaseWebhookErrors), arg0)
}

// IncreaseWebhookRequest mocks base method.
func (m *MockMetricsProvider) IncreaseWebhookRequest(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncreaseWebhookRequest", arg0)
}

// IncreaseWebhookRequest indicates an expected call of IncreaseWebhookRequest.
func (mr *MockMetricsProviderMockRecorder) IncreaseWebhookRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseWebhookRequest", reflect.TypeOf((*MockMetricsProvider)(nil).IncreaseWebhookRequest), arg0)
}

// ObserveCronTaskDuration mocks base method.
func (m *MockMetricsProvider) ObserveCronTaskDuration(arg0 string, arg1 float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ObserveCronTaskDuration", arg0, arg1)
}

// ObserveCronTaskDuration indicates an expected call of ObserveCronTaskDuration.
func (mr *MockMetricsProviderMockRecorder) ObserveCronTaskDuration(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveCronTaskDuration", reflect.TypeOf((*MockMetricsProvider)(nil).ObserveCronTaskDuration), arg0, arg1)
}

// ObserveGithubRequestDuration mocks base method.
func (m *MockMetricsProvider) ObserveGithubRequestDuration(arg0, arg1, arg2 string, arg3 float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ObserveGithubRequestDuration", arg0, arg1, arg2, arg3)
}

// ObserveGithubRequestDuration indicates an expected call of ObserveGithubRequestDuration.
func (mr *MockMetricsProviderMockRecorder) ObserveGithubRequestDuration(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveGithubRequestDuration", reflect.TypeOf((*MockMetricsProvider)(nil).ObserveGithubRequestDuration), arg0, arg1, arg2, arg3)
}

// ObserveHTTPRequestDuration mocks base method.
func (m *MockMetricsProvider) ObserveHTTPRequestDuration(arg0, arg1, arg2 string, arg3 float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ObserveHTTPRequestDuration", arg0, arg1, arg2, arg3)
}

// ObserveHTTPRequestDuration indicates an expected call of ObserveHTTPRequestDuration.
func (mr *MockMetricsProviderMockRecorder) ObserveHTTPRequestDuration(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveHTTPRequestDuration", reflect.TypeOf((*MockMetricsProvider)(nil).ObserveHTTPRequestDuration), arg0, arg1, arg2, arg3)
}
